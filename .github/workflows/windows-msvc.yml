name: Windows(MSVC) Tests

on:
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
jobs:
  build-and-test:
    name: windows-latest msvc
    runs-on: windows-latest
    permissions:
      actions: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        include:
          - build_type: Release
            cmake_preset: windows-msvc-release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Setup (detached) tmate session if enabled
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        with:
          detached: true

      - name: Setup Visual Studio Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Qt6
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.*'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          modules: 'qt5compat qtmultimedia'
          cache: true

      - name: Verify Qt6 Installation
        run: |
          echo === Qt6 Installation Check ===
          echo Qt6_DIR: %Qt6_DIR%
          echo.
          echo === Creating test directory and CMakeLists.txt ===
          mkdir test_qt6
          (
            echo cmake_minimum_required(VERSION 3.20^)
            echo project(Qt6VerificationTest^)
            echo find_package(Qt6 COMPONENTS Core Core5Compat Widgets Multimedia OpenGL OpenGLWidgets Concurrent Network Svg Test REQUIRED^)
            echo message(STATUS "Qt6 version: ${Qt6_VERSION}"^)
            echo message(STATUS "All Qt6 components found successfully!"^)
          ) > test_qt6\CMakeLists.txt
          echo.
          echo === Test CMakeLists.txt content ===
          type test_qt6\CMakeLists.txt
          echo.
          echo === Running CMake test ===
          cmake -B test_qt6\build -S test_qt6 -G "Visual Studio 17 2022" -A x64
          if errorlevel 1 (
            echo FAILED: Qt6 installation verification failed!
            exit /b 1
          )
          echo SUCCESS: Qt6 installation verified!
        shell: cmd

      - name: Build QScintilla from source
        run: |
          echo === Downloading QScintilla ===
          curl -L -o qscintilla.tar.gz https://www.riverbankcomputing.com/static/Downloads/QScintilla/2.14.1/QScintilla_src-2.14.1.tar.gz
          tar -xzf qscintilla.tar.gz
          cd QScintilla_src-2.14.1\src
          echo.
          echo === Building QScintilla ===
          qmake qscintilla.pro
          nmake
          echo.
          echo === Installing QScintilla ===
          nmake install
          echo SUCCESS: QScintilla built and installed!
        shell: cmd

      - name: Install Build Tools
        run: |
          choco install winflexbison3 wget -y
          echo Creating bsdtar symlink for Git Bash...
          mklink "C:\Program Files\Git\usr\bin\bsdtar.exe" "C:\Windows\System32\tar.exe"
        shell: cmd

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bsdiff4 numpy pillow
        shell: cmd

      - name: Record vcpkg start time
        run: echo "VCPKG_START_TIME=%TIME%" >> %GITHUB_ENV%
        shell: cmd

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '74e6536215718009aae747d86d84b78376bf9e09'
          vcpkgJsonGlob: '**/vcpkg.json'
          runVcpkgInstall: true
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: Show vcpkg binary cache statistics
        run: |
          echo ==============================================================
          echo vcpkg Installation Complete - Cache Effectiveness Report
          echo ==============================================================
          echo Start time: %VCPKG_START_TIME%
          echo End time:   %TIME%
          echo.
          echo Installed packages:
          "%VCPKG_ROOT%\vcpkg.exe" list | find /c ":"
          echo.
          echo Build trees (packages built from source during this run):
          if exist "%VCPKG_ROOT%\buildtrees" (
            dir /b "%VCPKG_ROOT%\buildtrees" | find /c /v ""
          ) else (
            echo 0 (All packages came from binary cache!)
          )
          echo ==============================================================
        shell: cmd

      - name: Configure and Build with CMake
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'windows-msvc-release'
          buildPreset: 'windows-msvc-release'

      - name: Run Tests
        uses: lukka/run-cmake@v10
        with:
          testPreset: 'windows-msvc-release'
        continue-on-error: true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Results (Windows MSVC ${{ matrix.build_type }})
          path: |
            build/${{ matrix.cmake_preset }}/Testing/Temporary/*_report.html
            build/${{ matrix.cmake_preset }}/Testing/Temporary/LastTest.log
          if-no-files-found: warn

      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: pythonscad-windows-msvc-${{ matrix.build_type }}
          path: |
            build/${{ matrix.cmake_preset }}/pythonscad.exe
            build/${{ matrix.cmake_preset }}/pythonscad-python.exe
          if-no-files-found: error
