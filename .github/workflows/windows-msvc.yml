name: Windows(MSVC) Tests

on:
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
jobs:
  build-and-test:
    name: windows-latest msvc
    runs-on: windows-latest
    permissions:
      actions: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        include:
          - build_type: Release
            cmake_preset: windows-msvc-release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'

      - name: Setup (detached) tmate session if enabled
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        with:
          detached: true

      - name: Setup Visual Studio Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Qt6
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.*'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          modules: 'qt5compat qtmultimedia'
          cache: true

      - name: Build QScintilla from source
        run: |
          echo === Downloading QScintilla ===
          curl -L -o qscintilla.tar.gz https://www.riverbankcomputing.com/static/Downloads/QScintilla/2.14.1/QScintilla_src-2.14.1.tar.gz
          tar -xzf qscintilla.tar.gz
          cd QScintilla_src-2.14.1\src
          echo.
          echo === Building QScintilla ===
          qmake qscintilla.pro
          nmake
          echo.
          echo === Installing QScintilla ===
          nmake install
          echo SUCCESS: QScintilla built and installed!
        shell: cmd

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: false

      - name: Install flex and bison via pacman
        run: /c/msys64/usr/bin/pacman -Sy --noconfirm flex bison
        shell: bash

      - name: Add MSYS2 to PATH
        run: echo "C:/msys64/usr/bin" >> $GITHUB_PATH
        shell: bash

      - name: Create bsdtar symlink
        run: |
          mklink "C:\Program Files\Git\usr\bin\bsdtar.exe" "C:\Windows\System32\tar.exe" || echo bsdtar symlink already exists
        shell: cmd
        continue-on-error: true

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bsdiff4 numpy pillow
        shell: cmd

      - name: Restore vcpkg binary cache
        id: vcpkg-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ~/.cache/vcpkg
            ~/AppData/Local/vcpkg
            ${{ github.workspace }}/vcpkg-cache
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('vcpkg-configuration.json', '.git/modules/vcpkg/HEAD') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-
            vcpkg-${{ runner.os }}-

      - name: Create vcpkg binary cache directory
        run: mkdir -p ${{ github.workspace }}/vcpkg-cache
        shell: bash

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '74e6536215718009aae747d86d84b78376bf9e09'
          vcpkgJsonGlob: '**/vcpkg.json'
          runVcpkgInstall: false
        env:
          VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}/vcpkg-cache,readwrite'

      - name: Install vcpkg dependencies
        shell: cmd
        run: |
          echo ==============================================================
          echo Installing dependencies from vcpkg.json
          echo ==============================================================
          echo Start time: %TIME%
          echo.
          echo Manifest file contents:
          type vcpkg.json
          echo.
          "${{ github.workspace }}\vcpkg\vcpkg.exe" install --triplet x64-windows
          echo.
          echo End time: %TIME%
          echo.
          echo Installed packages:
          "${{ github.workspace }}\vcpkg\vcpkg.exe" list
          echo ==============================================================
        env:
          VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}/vcpkg-cache,readwrite'

      - name: Save vcpkg binary cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ~/.cache/vcpkg
            ~/AppData/Local/vcpkg
            ${{ github.workspace }}/vcpkg-cache
          key: ${{ steps.vcpkg-cache.outputs.cache-primary-key }}

      - name: Configure and Build with CMake
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'windows-msvc-release'
          buildPreset: 'windows-msvc-release'
        env:
          VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}/vcpkg-cache,readwrite'

      - name: Run Tests
        uses: lukka/run-cmake@v10
        with:
          testPreset: 'windows-msvc-release'
        env:
          VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}/vcpkg-cache,readwrite'
        continue-on-error: true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Results (Windows MSVC ${{ matrix.build_type }})
          path: |
            build/${{ matrix.cmake_preset }}/Testing/Temporary/*_report.html
            build/${{ matrix.cmake_preset }}/Testing/Temporary/LastTest.log
          if-no-files-found: warn

      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: pythonscad-windows-msvc-${{ matrix.build_type }}
          path: |
            build/${{ matrix.cmake_preset }}/pythonscad.exe
            build/${{ matrix.cmake_preset }}/pythonscad-python.exe
          if-no-files-found: error
