name: Test MSVC Linker Issues

on:
  push:
    branches: [ visualstudio-build ]
  pull_request:
    branches: [ visualstudio-build ]

jobs:
  test-linker:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.10.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qt5compat qtmultimedia qtshadertools'
        cache: true

    - name: Setup MSYS2 for flex/bison
      uses: msys2/setup-msys2@v2
      with:
        msystem: MSYS
        update: false

    - name: Install flex and bison
      run: /c/msys64/usr/bin/pacman -Sy --noconfirm flex bison
      shell: bash

    - name: Add MSYS2 to PATH
      run: echo "C:/msys64/usr/bin" >> $GITHUB_PATH
      shell: bash

    - name: Create test source files
      shell: bash
      run: |
        mkdir -p test_linker

        # Create vcpkg.json for the test project
        cat > test_linker/vcpkg.json << 'EOF'
        {
          "dependencies": [
            "boost-regex",
            "boost-program-options",
            "eigen3",
            "harfbuzz",
            "freetype",
            "glib",
            "cairo",
            "pkgconf"
          ],
          "builtin-baseline": "74e6536215718009aae747d86d84b78376bf9e09"
        }
        EOF

        # Note: CMakePresets.json and test code will be created in next step

    - name: Restore vcpkg binary cache
      id: vcpkg-cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg-test
          ~/.cache/vcpkg
          ~/AppData/Local/vcpkg
          ${{ github.workspace }}/vcpkg-cache
        key: vcpkg-v2-${{ runner.os }}-${{ hashFiles('test_linker/vcpkg.json') }}
        restore-keys: |
          vcpkg-v2-${{ runner.os }}-

    - name: Create vcpkg binary cache directory
      run: mkdir -p ${{ github.workspace }}/vcpkg-cache
      shell: bash

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg-test'
        vcpkgGitCommitId: '74e6536215718009aae747d86d84b78376bf9e09'
        vcpkgJsonGlob: '**/test_linker/vcpkg.json'
        runVcpkgInstall: false
      env:
        VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}/vcpkg-cache,readwrite'

    - name: Restore QScintilla cache
      id: qscintilla-cache
      uses: actions/cache/restore@v4
      with:
        path: |
          D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla2_qt6.lib
          D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla2_qt6.dll
          D:\a\pythonscad\Qt\6.10.0\msvc2022_64\include\Qsci
        key: qscintilla-${{ runner.os }}-qt6.10.0-2.14.1

    - name: Download and build QScintilla
      if: steps.qscintilla-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        echo === Downloading QScintilla ===
        curl -L -o qscintilla.tar.gz https://www.riverbankcomputing.com/static/Downloads/QScintilla/2.14.1/QScintilla_src-2.14.1.tar.gz
        tar -xzf qscintilla.tar.gz
        cd QScintilla_src-2.14.1\src
        echo.
        echo === Building QScintilla ===
        qmake qscintilla.pro
        nmake
        echo.
        echo === Installing QScintilla ===
        nmake install
        echo SUCCESS: QScintilla built and installed!

    - name: Verify QScintilla installation
      if: steps.qscintilla-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        echo === Verifying QScintilla installation ===
        dir "D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla*"
        dir "D:\a\pythonscad\Qt\6.10.0\msvc2022_64\include\Qsci"

    - name: Cleanup QScintilla build to reduce cache size
      if: steps.qscintilla-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Cleaning up QScintilla build artifacts to reduce cache size..."
        rm -rf QScintilla_src-2.14.1
        rm -f qscintilla.tar.gz
        echo "Cleanup complete"

    - name: Verify QScintilla files exist
      shell: cmd
      run: |
        echo === Verifying QScintilla files after cache restore/build ===
        echo Checking for .lib file:
        if exist "D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla2_qt6.lib" (
          echo [OK] qscintilla2_qt6.lib found
          dir "D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla2_qt6.lib"
        ) else (
          echo [ERROR] qscintilla2_qt6.lib NOT FOUND
        )
        echo.
        echo Checking for .dll file:
        if exist "D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla2_qt6.dll" (
          echo [OK] qscintilla2_qt6.dll found
          dir "D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla2_qt6.dll"
        ) else (
          echo [ERROR] qscintilla2_qt6.dll NOT FOUND
        )
        echo.
        echo Checking for include directory:
        if exist "D:\a\pythonscad\Qt\6.10.0\msvc2022_64\include\Qsci" (
          echo [OK] Qsci include directory found
          dir "D:\a\pythonscad\Qt\6.10.0\msvc2022_64\include\Qsci"
        ) else (
          echo [ERROR] Qsci include directory NOT FOUND
        )

    - name: Save QScintilla cache
      if: steps.qscintilla-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla2_qt6.lib
          D:\a\pythonscad\Qt\6.10.0\msvc2022_64\lib\qscintilla2_qt6.dll
          D:\a\pythonscad\Qt\6.10.0\msvc2022_64\include\Qsci
        key: ${{ steps.qscintilla-cache.outputs.cache-primary-key }}

    - name: Create CMake files and test code
      shell: bash
      run: |
        # Create CMakePresets.json for the test project
        cat > test_linker/CMakePresets.json << 'EOF'
        {
          "version": 3,
          "configurePresets": [
            {
              "name": "test-msvc-release",
              "generator": "Visual Studio 17 2022",
              "architecture": {
                "value": "x64",
                "strategy": "set"
              },
              "binaryDir": "${sourceDir}/build",
              "toolchainFile": "$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake",
              "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Release",
                "VCPKG_TARGET_TRIPLET": "x64-windows",
                "CMAKE_PREFIX_PATH": "$env{Qt6_DIR}"
              }
            }
          ],
          "buildPresets": [
            {
              "name": "test-msvc-release",
              "configurePreset": "test-msvc-release",
              "configuration": "Release"
            }
          ]
        }
        EOF

        # Create a minimal test that uses all the libraries
        cat > test_linker/test_main.cpp << 'EOF'
        #include <iostream>
        #include <string>

        // Cairo test
        #include <cairo.h>
        std::string test_cairo() {
            return std::string("Cairo version: ") + CAIRO_VERSION_STRING;
        }

        // Glib test
        #include <glib.h>
        std::string test_glib() {
            return std::string("GLib version: ") + std::to_string(GLIB_MAJOR_VERSION) + "." +
                   std::to_string(GLIB_MINOR_VERSION);
        }

        // HarfBuzz test
        #include <hb.h>
        std::string test_harfbuzz() {
            return std::string("HarfBuzz version: ") + HB_VERSION_STRING;
        }

        // QScintilla test - must actually use the classes to trigger linker errors
        #include <Qsci/qsciscintilla.h>
        #include <Qsci/qsciscintillabase.h>
        #include <Qsci/qsciabstractapis.h>
        #include <QApplication>
        std::string test_qscintilla() {
            // Reference the staticMetaObject to trigger the same linker errors
            const QMetaObject* meta1 = &QsciScintilla::staticMetaObject;
            const QMetaObject* meta2 = &QsciScintillaBase::staticMetaObject;
            const QMetaObject* meta3 = &QsciAbstractAPIs::staticMetaObject;
            (void)meta1; (void)meta2; (void)meta3;
            return std::string("QScintilla: OK");
        }

        // Boost test
        #include <boost/version.hpp>
        std::string test_boost() {
            return std::string("Boost version: ") + BOOST_LIB_VERSION;
        }

        // Eigen test
        #include <Eigen/Core>
        std::string test_eigen() {
            return std::string("Eigen version: ") + std::to_string(EIGEN_WORLD_VERSION) + "." +
                   std::to_string(EIGEN_MAJOR_VERSION);
        }

        int main(int argc, char *argv[]) {
            QApplication app(argc, argv);

            std::cout << test_cairo() << std::endl;
            std::cout << test_glib() << std::endl;
            std::cout << test_harfbuzz() << std::endl;
            std::cout << test_qscintilla() << std::endl;
            std::cout << test_boost() << std::endl;
            std::cout << test_eigen() << std::endl;

            std::cout << "All library tests passed!" << std::endl;
            return 0;
        }
        EOF

        # Create CMakeLists.txt for the test
        cat > test_linker/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.20)
        project(LinkerTest)

        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # Qt6
        find_package(Qt6 REQUIRED COMPONENTS Core Widgets)

        # vcpkg packages
        find_package(PkgConfig REQUIRED)

        # Cairo
        pkg_check_modules(CAIRO REQUIRED cairo)

        # Glib
        pkg_check_modules(GLIB2 REQUIRED IMPORTED_TARGET glib-2.0)

        # HarfBuzz
        find_package(harfbuzz CONFIG REQUIRED)

        # Boost
        find_package(Boost REQUIRED)

        # Eigen
        find_package(Eigen3 REQUIRED)

        # QScintilla
        list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/../cmake/Modules")

        message(STATUS "=== QScintilla Debug Info ===")
        message(STATUS "CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}")
        message(STATUS "Qt6_DIR: ${Qt6_DIR}")
        message(STATUS "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")

        find_package(Qt6QScintilla 2.8.0 REQUIRED)

        message(STATUS "QScintilla library: ${QT6QSCINTILLA_LIBRARY}")
        message(STATUS "QScintilla include: ${QT6QSCINTILLA_INCLUDE_DIR}")
        message(STATUS "QScintilla version: ${QT6QSCINTILLA_VERSION}")

        # Create imported target for QScintilla
        if(NOT TARGET Qt6QScintilla::Qt6QScintilla)
          add_library(Qt6QScintilla::Qt6QScintilla SHARED IMPORTED)
          set_target_properties(Qt6QScintilla::Qt6QScintilla PROPERTIES
            IMPORTED_IMPLIB "${QT6QSCINTILLA_LIBRARY}"
            INTERFACE_INCLUDE_DIRECTORIES "${QT6QSCINTILLA_INCLUDE_DIR}"
          )
        endif()

        add_executable(linker_test test_main.cpp)

        target_include_directories(linker_test PRIVATE
          ${CAIRO_INCLUDE_DIRS}
          ${Boost_INCLUDE_DIRS}
        )

        target_link_libraries(linker_test PRIVATE
          Qt6::Core
          Qt6::Widgets
          Qt6QScintilla::Qt6QScintilla
          PkgConfig::GLIB2
          ${CAIRO_LINK_LIBRARIES}
          harfbuzz::harfbuzz
          Eigen3::Eigen
          ${Boost_LIBRARIES}
        )

        # Disable manifest auto-generation
        target_link_options(linker_test PRIVATE /MANIFEST:NO)
        EOF

    - name: Install vcpkg dependencies
      if: steps.vcpkg-cache.outputs.cache-hit != 'true'
      shell: cmd
      working-directory: test_linker
      run: |
        echo Installing test dependencies from vcpkg.json
        "${{ github.workspace }}\vcpkg-test\vcpkg.exe" install --triplet x64-windows
        echo.
        echo Installed packages:
        "${{ github.workspace }}\vcpkg-test\vcpkg.exe" list
      env:
        VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}/vcpkg-cache,readwrite'

    - name: Cleanup vcpkg to reduce cache size
      if: steps.vcpkg-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Cleaning up vcpkg directories to reduce cache size..."
        rm -rf ${{ github.workspace }}/vcpkg-test/buildtrees
        rm -rf ${{ github.workspace }}/vcpkg-test/downloads
        rm -rf ${{ github.workspace }}/vcpkg-test/packages
        echo "Cleanup complete"

    - name: Add vcpkg tools to PATH
      shell: bash
      run: |
        echo "${{ github.workspace }}/vcpkg-test/installed/x64-windows/tools/pkgconf" >> $GITHUB_PATH
        echo "PKG_CONFIG_EXECUTABLE=${{ github.workspace }}/vcpkg-test/installed/x64-windows/tools/pkgconf/pkgconf.exe" >> $GITHUB_ENV

    - name: Save vcpkg binary cache
      if: steps.vcpkg-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg-test
          ~/.cache/vcpkg
          ~/AppData/Local/vcpkg
          ${{ github.workspace }}/vcpkg-cache
        key: ${{ steps.vcpkg-cache.outputs.cache-primary-key }}

    - name: Configure and Build with CMake
      uses: lukka/run-cmake@v10
      with:
        cmakeListsTxtPath: '${{ github.workspace }}/test_linker/CMakeLists.txt'
        configurePreset: 'test-msvc-release'
        buildPreset: 'test-msvc-release'
        configurePresetAdditionalArgs: "['--debug-find', '--trace-expand']"
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg-test
        VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}/vcpkg-cache,readwrite'

    - name: Run test
      shell: bash
      run: |
        cd test_linker/build/Release
        ./linker_test.exe
