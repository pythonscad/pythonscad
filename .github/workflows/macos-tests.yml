name: macOS Experimental Tests

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with ssh debugging enabled'
        required: false
        default: false

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [macos-15-intel, macos-latest]
        qt: [qt5, qt6]
        exclude:
          # macos-latest runs on arm64, which has a broken SW renderer
          - os: macos-latest
          # QScintilla for qt5 is not longer available on Homebrew, and
          # it's too much work to keep that running.
          - qt: qt5
    runs-on:  ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.qt }}
    # If it's not done in 90 minutes, something is wrong.
    # Default is 6 hours, which is a bit long to wait.
    timeout-minutes: 90
    steps:
    - name: Set Qt version
      run: |
        case ${{ matrix.qt }} in
        qt5) echo "CMAKE_OPTIONS=-DUSE_QT6=0" >> $GITHUB_ENV ;;
        esac
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: 'recursive'
    # - name: Workaround for https://github.com/actions/runner-images/issues/9966
    #   run: |
    #     brew unlink python3
    #     brew link --overwrite python3
    - name: Install Homebrew packages
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1
      run: |
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        ./scripts/macosx-build-homebrew.sh ${{ matrix.qt }}
    - name: Build OpenSCAD
      run: |
        mkdir build
        cd build
        # Use RelWithDebInfo to get debug symbols while keeping optimizations
        # This helps with crash analysis while not being too slow
        cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_UNITY_BUILD=OFF -DEXPERIMENTAL=ON -DSNAPSHOT=ON -DUSE_CCACHE=OFF -DUSE_BUILTIN_OPENCSG=ON $CMAKE_OPTIONS
        export NUMCPU=$(($(sysctl -n hw.ncpu) * 3 / 2))
        make -j$NUMCPU
    - name: Setup (detached) tmate ssh session if enabled
      # if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 5
      with:
        detached: true
        limit-access-to-actor: true
    - name: Debug Python setup
      run: |
        echo "=== Checking bundle structure ==="
        ls -la build/pythonscad.app/Contents/MacOS/
        echo ""
        echo "=== Checking if pythonscad-python symlink exists ==="
        if [ -L build/pythonscad.app/Contents/MacOS/pythonscad-python ]; then
          echo "Symlink exists:"
          ls -l build/pythonscad.app/Contents/MacOS/pythonscad-python
        else
          echo "ERROR: pythonscad-python symlink NOT found!"
        fi
        echo ""
        echo "=== Checking RPATH settings ==="
        otool -l build/pythonscad.app/Contents/MacOS/pythonscad | grep -A 3 "LC_RPATH" || echo "No RPATH found"
        echo ""
        echo "=== Testing simple Python execution ==="
        echo 'from openscad import *; print("Python module loaded"); cube(10).show()' > /tmp/test.py
        build/pythonscad.app/Contents/MacOS/pythonscad /tmp/test.py -o /tmp/test.png --render --trust-python 2>&1 || echo "Exit code: $?"
        echo ""
        echo "=== Checking all linked libraries ==="
        otool -L build/pythonscad.app/Contents/MacOS/pythonscad
        echo ""
        echo "=== Checking library versions ==="
        echo "Python version:"
        python3 --version
        echo "Python framework:"
        ls -la /usr/local/opt/python@3.14/Frameworks/Python.framework/Versions/3.14/Python || echo "Not found"
        echo "CGAL:"
        brew list --versions cgal || echo "Not installed via brew"
        echo "Boost:"
        brew list --versions boost || echo "Not installed via brew"
    - name: Test Python version compatibility
      run: |
        echo "=== Python Version Mismatch Analysis ==="
        echo "System Python (python3):"
        which python3 && python3 --version
        echo ""
        echo "Python 3.14 (if available):"
        which python3.14 && python3.14 --version || echo "python3.14 not in PATH"
        echo ""
        echo "What pythonscad links to:"
        otool -L build/pythonscad.app/Contents/MacOS/pythonscad | grep Python
        echo ""
        echo "Checking if Python 3.14 library actually exists:"
        ls -la /usr/local/opt/python@3.14/Frameworks/Python.framework/Versions/3.14/Python
        echo ""
        echo "=== Testing with environment forcing Python 3.14 ==="
        export DYLD_FRAMEWORK_PATH=/usr/local/opt/python@3.14/Frameworks:$DYLD_FRAMEWORK_PATH
        export DYLD_LIBRARY_PATH=/usr/local/opt/python@3.14/Frameworks/Python.framework/Versions/3.14/lib:$DYLD_LIBRARY_PATH
        echo "Attempting fillet test with explicit Python 3.14..."
        echo 'from openscad import *
        fig1 = cube(10,center=True)
        fig1.fillet(1).show()' > /tmp/test_fillet.py
        build/pythonscad.app/Contents/MacOS/pythonscad /tmp/test_fillet.py -o /tmp/test_fillet.png --render --trust-python 2>&1 && echo "SUCCESS!" || echo "FAILED with code: $?"

    - name: Test crashing Python file with lldb
      run: |
        echo "=== Testing fillet.py with lldb to get crash info ==="
        echo 'from openscad import *
        fig1 = cube(10,center=True)
        fig1.fillet(1).show()' > /tmp/test_fillet.py

        # Create lldb batch file
        cat > /tmp/lldb_commands.txt <<'EOF'
        file build/pythonscad.app/Contents/MacOS/pythonscad
        settings set target.input-path /dev/null
        process launch -- /tmp/test_fillet.py -o /tmp/test_fillet.png --render --trust-python
        bt
        quit
        EOF

        echo "Running with lldb to capture crash..."
        lldb --batch --source /tmp/lldb_commands.txt 2>&1 | tee /tmp/lldb_output.txt || true
        echo ""
        echo "=== KEY FINDING: Test succeeds under lldb but fails normally! ==="
        echo "This indicates a race condition or timing-dependent bug."
        echo ""
        echo "=== Checking for macOS crash reports ==="
        ls -lt ~/Library/Logs/DiagnosticReports/ | head -20 || echo "No crash reports"
        echo ""
        echo "=== Checking latest crash report if exists ==="
        LATEST_CRASH=$(ls -t ~/Library/Logs/DiagnosticReports/pythonscad*.crash 2>/dev/null | head -1)
        if [ -n "$LATEST_CRASH" ]; then
          echo "Found crash report: $LATEST_CRASH"
          cat "$LATEST_CRASH"
        else
          echo "No pythonscad crash reports found"
        fi
    - name: Run Test Suite
      # Set DYLD_FALLBACK_FRAMEWORK_PATH to ensure Python 3.14 framework is found
      # RPATH doesn't work for frameworks on macOS, only for dylibs
      # Only run the failing Python tests for faster debugging
      # Full list of failing tests: pythonscad_fillet, pythonscad_fillet_csg,
      # pythonscad_flower, pythonscad_helix, pythonscad_hinge, pythonscad_skin,
      # pythonscad_spline, pythonscadecho_bbox, pythonscadecho_position, pythonscadecho_size
      run: |
        cd build
        export DYLD_FALLBACK_FRAMEWORK_PATH=/usr/local/opt/python@3.14/Frameworks:$DYLD_FALLBACK_FRAMEWORK_PATH
        echo "=== Running only failing Python tests for debugging ==="
        ctest -R "pythonscad_(fillet|flower|helix|hinge|skin|spline)|pythonscadecho_(bbox|position|size)" --timeout 60 --output-on-failure -V
    - name: Upload Test Result Report
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: Test Result Report (MacOS ${{ matrix.qt }})
        path: |
          build/Testing/Temporary/*_report.html
          build/Testing/Temporary/LastTest.log
