name: macOS Experimental Tests

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with ssh debugging enabled'
        required: false
        default: false

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [macos-15-intel, macos-latest]
        qt: [qt5, qt6]
        exclude:
          # macos-latest runs on arm64, which has a broken SW renderer
          - os: macos-latest
          # QScintilla for qt5 is not longer available on Homebrew, and
          # it's too much work to keep that running.
          - qt: qt5
    runs-on:  ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.qt }}
    # If it's not done in 90 minutes, something is wrong.
    # Default is 6 hours, which is a bit long to wait.
    timeout-minutes: 90
    steps:
    - name: Set Qt version
      run: |
        case ${{ matrix.qt }} in
        qt5) echo "CMAKE_OPTIONS=-DUSE_QT6=0" >> $GITHUB_ENV ;;
        esac
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: 'recursive'
    # - name: Workaround for https://github.com/actions/runner-images/issues/9966
    #   run: |
    #     brew unlink python3
    #     brew link --overwrite python3
    - name: Install Homebrew packages
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1
      run: |
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        ./scripts/macosx-build-homebrew.sh ${{ matrix.qt }}
    - name: Build OpenSCAD
      run: |
        mkdir build
        cd build
        # Force CMake to use system Python (3.13) instead of Homebrew Python (3.14)
        # Need to use Python3_EXECUTABLE (Python 3) not Python_EXECUTABLE (generic Python)
        # Also set Python3_ROOT_DIR to ensure all Python 3 components come from system Python
        SYSTEM_PYTHON="/usr/local/bin/python3"
        PYTHON_VERSION=$($SYSTEM_PYTHON --version | cut -d' ' -f2 | cut -d. -f1-2)
        echo "Using system Python: $SYSTEM_PYTHON (version $PYTHON_VERSION)"
        # Use RelWithDebInfo to get debug symbols while keeping optimizations
        # This helps with crash analysis while not being too slow
        cmake .. \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_UNITY_BUILD=OFF \
          -DEXPERIMENTAL=ON \
          -DSNAPSHOT=ON \
          -DUSE_CCACHE=OFF \
          -DUSE_BUILTIN_OPENCSG=ON \
          -DPython3_EXECUTABLE="$SYSTEM_PYTHON" \
          -DPython3_ROOT_DIR="/usr/local" \
          -DPython_FIND_STRATEGY=LOCATION \
          $CMAKE_OPTIONS
        export NUMCPU=$(($(sysctl -n hw.ncpu) * 3 / 2))
        make -j$NUMCPU
    - name: Setup (detached) tmate ssh session if enabled
      # if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 1
      with:
        detached: true
        limit-access-to-actor: true
    - name: Verify Python setup
      run: |
        echo "=== System Python version ==="
        python3 --version
        which python3
        echo ""
        echo "=== Checking pythonscad-python symlink ==="
        ls -l build/pythonscad.app/Contents/MacOS/pythonscad-python
        echo ""
        echo "=== Verifying bundled Python framework ==="
        if [ -d build/pythonscad.app/Contents/Frameworks/Python.framework ]; then
          echo "✓ Python.framework is bundled in app"
          ls -la build/pythonscad.app/Contents/Frameworks/Python.framework/Versions/
        else
          echo "✗ Python.framework NOT bundled - app won't be portable!"
        fi
        echo ""
        echo "=== Checking Python library reference (should use @rpath) ==="
        otool -L build/pythonscad.app/Contents/MacOS/pythonscad | grep -i python
        echo ""
        echo "=== Checking RPATH settings ==="
        otool -l build/pythonscad.app/Contents/MacOS/pythonscad | grep -A 3 "LC_RPATH"
        echo ""
        echo "=== Testing simple Python execution ==="
        echo 'from openscad import *; print("Python module loaded"); cube(10).show()' > /tmp/test.py
        build/pythonscad.app/Contents/MacOS/pythonscad /tmp/test.py -o /tmp/test.png --render --trust-python
    - name: Run Test Suite
      # Disable pdf export test on macOS because Cairo >= 1.18 on Homebrew uses the
      # Quartz backend which doesn't have the Liberation Sans font we use.
      run: |
        # Enable core dumps
        ulimit -c unlimited
        # Set core dump location
        sudo sysctl kern.corefile=/cores/core.%P
        mkdir -p /tmp/cores
        cd build
        export NUMCPU=$(($(sysctl -n hw.ncpu) * 3 / 2))
        # Run tests and continue even if they fail (to collect core dumps)
        ctest -j$NUMCPU -E pdfexporttest --timeout 300 --output-on-failure || true
        # Check for core dumps and copy them
        echo "=== Checking for core dumps ==="
        if ls /cores/core.* 1> /dev/null 2>&1; then
          echo "Core dumps found:"
          ls -lh /cores/core.*
          sudo cp /cores/core.* /tmp/cores/ || true
          sudo chmod 644 /tmp/cores/* || true

          # Analyze core dumps and save output
          echo "=== Analyzing core dumps with lldb ==="
          for corefile in /cores/core.*; do
            pid=$(basename $corefile | cut -d. -f2)
            echo "Analyzing $corefile (PID: $pid)"

            # Run lldb on the core dump and save output
            output_file="/tmp/cores/analysis_${pid}.txt"
            echo "=== Core Dump Analysis for PID $pid ===" > "$output_file"
            echo "Core file: $corefile" >> "$output_file"
            echo "" >> "$output_file"

            lldb -c "$corefile" -o "bt all" -o "thread backtrace all" -o "frame variable" -o "register read" -o "image list" -o "quit" >> "$output_file" 2>&1 || true

            echo "Analysis saved to $output_file"
            echo "First 50 lines:"
            head -50 "$output_file"
          done
        else
          echo "No core dumps found"
        fi
        # Re-run ctest to get the proper exit code for the workflow
        ctest -j$NUMCPU -E pdfexporttest --timeout 300 --output-on-failure
    - name: Upload Core Dumps
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: Core Dumps (MacOS ${{ matrix.qt }})
        path: /tmp/cores/core.*
        if-no-files-found: ignore
    - name: Upload Test Result Report
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: Test Result Report (MacOS ${{ matrix.qt }})
        path: |
          build/Testing/Temporary/*_report.html
          build/Testing/Temporary/LastTest.log
